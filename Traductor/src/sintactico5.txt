//// Gramática del fichero de gramática
//// Conjunto de símbolos terminales
Terminales = { lambda var tipo id = -= ( ) cons op + == & , function { } tipo return if for ; }

//// Conjunto de símbolo no terminales
NoTerminales = { Axioma S Declaracion Asignacion Operacion IO Funcion Condicional For SF SI X A1 Term ListaParam A1 Cadena C1 Operacion1 Op ListaParam1 ListaParam Funcion F2 ListaParamTipo F1 ListaParamTipo1 ListaParamTipo }

//// Axioma
Axioma = S
//// Lista de producciones
Producciones = {



S -> Declaracion br S
S -> Asignacion br S
S -> IO br S
S -> Funcion br S
S -> Condicional br S
S -> For br S
S -> lambda



SF -> Declaracion br SF
SF -> Asignacion br SF
SF -> IO br SF
SF -> Condicional br SF
SF -> For br SF
SF -> lambda

SI -> Declaracion br
SI -> Asignacion br
SI -> IO br
SI -> Condicional br
SI -> For br

Declaracion -> var tipo id

Asignacion -> id X
X -> = A1
X -> -= Term
X -> ( ListaParam )
A1 -> Cadena

Cadena -> Term C1
C1 -> lambda
C1 -> Op Term C1


Operacion1 -> Op Term Operacion1
Operacion1 -> lambda
Operacion -> Term Op Term Operacion
Op -> +
Op -> ==
Op -> &&

IO -> opIO ( Cadena )


ListaParam1 -> , Cadena ListaParam1
ListaParam1 -> lambda
ListaParam -> Cadena ListaParam1

Funcion -> function F2
F2 -> id ( ListaParamTipo ) { SF }
F2 -> tipo id ( ListaParamTipo ) { SF return F1
F1 -> Cadena }

ListaParamTipo1 -> , tipo id ListaParamTipo1
ListaParamTipo1 -> lambda
ListaParamTipo -> tipo id ListaParamTipo1

Condicional -> if ( Operacion ) SI

For -> for ( Asignacion ; Operacion ; Asignacion ) { SF }

Term -> id
Term -> cons

}

